generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  nickname     String?
  password     String?
  refreshToken String?
  image        String?
  products     Product[]
  favorites    Favorite[]
  articles     Article[]
  likes        Like[]
  comments     Comment[]
  provider     String?
  providerId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([provider, providerId])
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  name        String
  description String
  price       Float
  images      String[]
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  favorites   Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Article {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
}
